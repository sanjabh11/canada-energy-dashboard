name: CEIP Nightly Validation

on:
  schedule:
    - cron: "30 18 * * *" # 18:30 UTC daily (adjust as needed)
  workflow_dispatch: # Allow manual trigger

jobs:
  run-nightly-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Create output directory
        run: |
          mkdir -p tests/nightly/out

      - name: Run Nightly Tests
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_FUNCTIONS_BASE: ${{ secrets.SUPABASE_FUNCTIONS_BASE }}
          TEST_PROVINCES: "ON,AB"
        run: |
          node tests/nightly/ceip_nightly_tests.mjs

      - name: Upload Report Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ceip-nightly-report-${{ github.run_number }}
          path: tests/nightly/out
          retention-days: 30

      - name: Comment on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Find the latest report
            const outDir = 'tests/nightly/out';
            const files = fs.readdirSync(outDir).filter(f => f.endsWith('.md'));
            
            if (files.length > 0) {
              const latestReport = files.sort().reverse()[0];
              const reportContent = fs.readFileSync(path.join(outDir, latestReport), 'utf-8');
              
              // Create issue or comment
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Nightly Tests Failed - ${new Date().toISOString().split('T')[0]}`,
                body: `## Nightly Validation Failed\n\n${reportContent}\n\n**Workflow Run:** ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
              });
            }
