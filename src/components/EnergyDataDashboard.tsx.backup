/**
 * Main Energy Data Dashboard Component
 * 
 * Professional energy data dashboard with multi-dataset support,
 * streaming capabilities, and comprehensive data visualization.
 */

import React, { useState, useEffect, useCallback } from 'react';
import { 
  energyDataManager, 
  DATASETS, 
  type DatasetType, 
  type ConnectionStatus 
} from '../lib/dataManager';
import { DatasetSelector } from './DatasetSelector';
import { ConnectionStatusPanel } from './ConnectionStatusPanel';
import { DataVisualization } from './DataVisualization';
import { DataFilters } from './DataFilters';
import { DataTable } from './DataTable';
import { DataExporter } from './DataExporter';
import { LoadingSpinner } from './LoadingSpinner';
import { Zap, Database, Activity } from 'lucide-react';

interface DashboardState {
  activeDataset: DatasetType;
  data: any[];
  filteredData: any[];
  loading: boolean;
  error: string | null;
  progress: { loaded: number; total: number; percentage: number } | null;
}

interface FilterOptions {
  dateRange?: { start: string; end: string };
  searchQuery?: string;
  selectedFields?: Record<string, string[]>;
}

export const EnergyDataDashboard: React.FC = () => {
  const [state, setState] = useState<DashboardState>({
    activeDataset: 'provincial_generation',
    data: [],
    filteredData: [],
    loading: false,
    error: null,
    progress: null
  });

  const [connectionStatuses, setConnectionStatuses] = useState<ConnectionStatus[]>([]);
  const [filters, setFilters] = useState<FilterOptions>({});
  const [showFilters, setShowFilters] = useState(false);
  const [maxRows, setMaxRows] = useState(5000);

  // Load connection statuses
  useEffect(() => {
    const updateStatuses = () => {
      setConnectionStatuses(energyDataManager.getAllConnectionStatuses());
    };

    updateStatuses();
    const interval = setInterval(updateStatuses, 1000);
    return () => clearInterval(interval);
  }, []);

  // Load data when dataset changes
  useEffect(() => {
    loadDataset(state.activeDataset, false);
  }, [state.activeDataset]);

  // Apply filters when data or filters change
  useEffect(() => {
    applyFilters();
  }, [state.data, filters]);

  const loadDataset = useCallback(async (datasetKey: DatasetType, forceStream = false) => {
    setState(prev => ({
      ...prev,
      loading: true,
      error: null,
      progress: null
    }));

    try {
      const data = await energyDataManager.loadData(datasetKey, {
        forceStream,
        maxRows,
        onProgress: (progress) => {
          setState(prev => ({ ...prev, progress }));
        },
        onStatusChange: (status) => {
          console.log(`Status update for ${datasetKey}:`, status);
        }
      });

      setState(prev => ({
        ...prev,
        data,
        loading: false,
        progress: { loaded: data.length, total: data.length, percentage: 100 }
      }));
    } catch (error) {
      setState(prev => ({
        ...prev,
        loading: false,
        error: error instanceof Error ? error.message : 'Failed to load data',
        progress: null
      }));
    }
  }, [maxRows]);

  const applyFilters = useCallback(() => {
    let filtered = [...state.data];

    // Apply search query
    if (filters.searchQuery && filters.searchQuery.trim()) {
      const query = filters.searchQuery.toLowerCase().trim();
      filtered = filtered.filter(row => 
        Object.values(row).some(value => 
          String(value).toLowerCase().includes(query)
        )
      );
    }

    // Apply date range filter
    if (filters.dateRange) {
      const { start, end } = filters.dateRange;
      filtered = filtered.filter(row => {
        const dateField = row.date || row.datetime || row.market_date;
        if (!dateField) return true;
        
        const rowDate = new Date(dateField).toISOString().split('T')[0];
        return rowDate >= start && rowDate <= end;
      });
    }

    // Apply field-specific filters
    if (filters.selectedFields) {
      Object.entries(filters.selectedFields).forEach(([field, values]) => {
        if (values.length > 0) {
          filtered = filtered.filter(row => values.includes(String(row[field])));
        }
      });
    }

    setState(prev => ({ ...prev, filteredData: filtered }));
  }, [state.data, filters]);

  const handleDatasetChange = (datasetKey: DatasetType) => {
    setState(prev => ({ ...prev, activeDataset: datasetKey }));
    setFilters({}); // Clear filters when changing datasets
  };

  const handleRefresh = () => {
    loadDataset(state.activeDataset, true);
  };

  const handleFilterChange = (newFilters: FilterOptions) => {
    setFilters(newFilters);
  };

  const activeDatasetInfo = DATASETS.find(d => d.key === state.activeDataset)!;
  const activeStatus = connectionStatuses.find(s => s.dataset === activeDatasetInfo.name);

  return (
    <div className="min-h-screen bg-slate-50">
      {/* Header */}
      <header className="bg-gradient-to-r from-blue-900 to-blue-800 text-white shadow-lg">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center space-x-3">
              <div className="bg-blue-700 p-2 rounded-lg">
                <Zap className="h-6 w-6" />
              </div>
              <div>
                <h1 className="text-xl font-bold">Energy Data Dashboard</h1>
                <p className="text-blue-200 text-sm">Real-time streaming data analytics</p>
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              <div className="text-sm">
                <div className="text-blue-200">Total Records</div>
                <div className="font-semibold">{state.filteredData.length.toLocaleString()}</div>
              </div>
              <button
                onClick={handleRefresh}
                disabled={state.loading}
                className="bg-blue-600 hover:bg-blue-700 disabled:opacity-50 px-4 py-2 rounded-lg font-medium transition-colors flex items-center space-x-2"
              >
                <Activity className="h-4 w-4" />
                <span>{state.loading ? 'Loading...' : 'Refresh'}</span>
              </button>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          {/* Left Sidebar */}
          <div className="lg:col-span-1 space-y-6">
            {/* Dataset Selector */}
            <div className="bg-white rounded-xl shadow-sm border border-slate-200">
              <div className="p-4 border-b border-slate-200">
                <h3 className="text-lg font-semibold text-slate-800 flex items-center">
                  <Database className="h-5 w-5 mr-2 text-blue-600" />
                  Datasets
                </h3>
              </div>
              <DatasetSelector
                datasets={DATASETS}
                activeDataset={state.activeDataset}
                onDatasetChange={handleDatasetChange}
                connectionStatuses={connectionStatuses}
              />
            </div>

            {/* Connection Status Panel */}
            <ConnectionStatusPanel
              statuses={connectionStatuses}
              activeDataset={state.activeDataset}
            />

            {/* Data Filters */}
            <div className="bg-white rounded-xl shadow-sm border border-slate-200">
              <div className="p-4 border-b border-slate-200">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-semibold text-slate-800">Filters</h3>
                  <button
                    onClick={() => setShowFilters(!showFilters)}
                    className="text-blue-600 hover:text-blue-700 text-sm font-medium"
                  >
                    {showFilters ? 'Hide' : 'Show'}
                  </button>
                </div>
              </div>
              {showFilters && (
                <DataFilters
                  data={state.data}
                  datasetType={state.activeDataset}
                  filters={filters}
                  onFilterChange={handleFilterChange}
                />
              )}
            </div>
          </div>

          {/* Main Content */}
          <div className="lg:col-span-3 space-y-6">
            {/* Loading State */}
            {state.loading && (
              <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-8">
                <LoadingSpinner
                  progress={state.progress}
                  message={`Loading ${activeDatasetInfo.name}...`}
                />
              </div>
            )}

            {/* Error State */}
            {state.error && (
              <div className="bg-red-50 border border-red-200 rounded-xl p-6">
                <div className="flex items-center space-x-3">
                  <div className="bg-red-100 p-2 rounded-lg">
                    <Activity className="h-5 w-5 text-red-600" />
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-red-800">Error Loading Data</h3>
                    <p className="text-red-600 mt-1">{state.error}</p>
                  </div>
                </div>
                <button
                  onClick={handleRefresh}
                  className="mt-4 bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg font-medium transition-colors"
                >
                  Retry
                </button>
              </div>
            )}

            {/* Data Visualization */}
            {!state.loading && !state.error && state.filteredData.length > 0 && (
              <>
                <div className="bg-white rounded-xl shadow-sm border border-slate-200">
                  <div className="p-4 border-b border-slate-200">
                    <div className="flex items-center justify-between">
                      <h3 className="text-lg font-semibold text-slate-800">
                        {activeDatasetInfo.name} Visualization
                      </h3>
                      <DataExporter
                        datasetKey={state.activeDataset}
                        dataManager={energyDataManager}
                      />
                    </div>
                  </div>
                  <div className="p-6">
                    <DataVisualization
                      data={state.filteredData}
                      datasetType={state.activeDataset}
                      datasetInfo={activeDatasetInfo}
                    />
                  </div>
                </div>

                {/* Data Table */}
                <div className="bg-white rounded-xl shadow-sm border border-slate-200">
                  <div className="p-4 border-b border-slate-200">
                    <h3 className="text-lg font-semibold text-slate-800">
                      Data Table ({state.filteredData.length.toLocaleString()} records)
                    </h3>
                  </div>
                  <DataTable
                    data={state.filteredData}
                    datasetType={state.activeDataset}
                    maxRows={100} // Limit table display for performance
                  />
                </div>
              </>
            )}

            {/* Empty State */}
            {!state.loading && !state.error && state.filteredData.length === 0 && state.data.length > 0 && (
              <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-12 text-center">
                <Database className="h-16 w-16 text-slate-300 mx-auto mb-4" />
                <h3 className="text-xl font-semibold text-slate-600 mb-2">No Data Found</h3>
                <p className="text-slate-500 mb-4">
                  No records match your current filter criteria.
                </p>
                <button
                  onClick={() => setFilters({})}
                  className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors"
                >
                  Clear Filters
                </button>
              </div>
            )}
          </div>
        </div>
        ) : (
          /* Other Tab Content */
          <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-8 text-center">
            <div className="max-w-md mx-auto">
              <div className="bg-blue-50 p-4 rounded-full w-16 h-16 mx-auto mb-4 flex items-center justify-center">
                {(() => {
                  const activeTabData = navigationTabs.find(tab => tab.id === activeTab);
                  if (activeTabData?.icon) {
                    const IconComponent = activeTabData.icon;
                    return <IconComponent className="h-8 w-8 text-blue-600" />;
                  }
                  return null;
                })()}
              </div>
              <h2 className="text-2xl font-bold text-slate-800 mb-2">{activeTab}</h2>
              <p className="text-slate-600 mb-6">
                {activeTab === 'Home' && 'Welcome to the Canadian Energy Information Portal. Navigate to the Dashboard to explore energy data.'}
                {activeTab === 'Provinces' && 'Explore energy data by Canadian province and territory.'}
                {activeTab === 'Trends' && 'Analyze energy trends and patterns over time.'}
                {activeTab === 'Education' && 'Learn about energy systems and data interpretation.'}
              </p>
              <button
                onClick={() => setActiveTab('Dashboard')}
                className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors"
              >
                Go to Dashboard
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};
